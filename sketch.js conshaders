// Collection of basic and more ellaborated CV demos to show interested young students

// Facemesh from mediapipe source https://awesomeopensource.com/project/LingDong-/handpose-facemesh-demos
// - use facemesh to track face skeleton
// - send to server via socket.io
// - update display with other users' faces from server

// First of all, shut glitch up about p5's global namespace pollution using this magic comment:
/* global describe p5 setup draw P2D WEBGL ARROW CROSS face MOVE TEXT WAIT HALF_PI PI QUARTER_PI TAU TWO_PI DEGREES RADIANS DEG_TO_RAD RAD_TO_DEG CORNER CORNERS RADIUS RIGHT LEFT CENTER TOP BOTTOM BASELINE POINTS LINES LINE_STRIP LINE_LOOP TRIANGLES TRIANGLE_FAN TRIANGLE_STRIP QUADS QUAD_STRIP TESS CLOSE OPEN CHORD PIE PROJECT SQUARE ROUND BEVEL MITER RGB HSB HSL AUTO ALT BACKSPACE CONTROL DELETE DOWN_ARROW ENTER ESCAPE LEFT_ARROW OPTION RETURN RIGHT_ARROW SHIFT TAB UP_ARROW BLEND REMOVE ADD DARKEST LIGHTEST DIFFERENCE SUBTRACT EXCLUSION MULTIPLY SCREEN REPLACE OVERLAY HARD_LIGHT SOFT_LIGHT DODGE BURN THRESHOLD GRAY OPAQUE INVERT POSTERIZE DILATE ERODE BLUR NORMAL ITALIC BOLD BOLDITALIC LINEAR QUADRATIC BEZIER CURVE STROKE FILL TEXTURE IMMEDIATE IMAGE NEAREST REPEAT CLAMP MIRROR LANDSCAPE PORTRAIT GRID AXES frameCount deltaTime focused cursor frameRate getFrameRate setFrameRate noCursor displayWidth displayHeight windowWidth windowHeight width height fullscreen pixelDensity displayDensity getURL getURLPath getURLParams pushStyle popStyle popMatrix pushMatrix registerPromisePreload camera perspective ortho frustum createCamera setCamera setAttributes createCanvas resizeCanvas noCanvas createGraphics blendMode noLoop loop push pop redraw applyMatrix resetMatrix rotate rotateX rotateY rotateZ scale shearX shearY translate arc ellipse circle line point quad rect square triangle ellipseMode noSmooth rectMode smooth strokeCap strokeJoin strokeWeight bezier bezierDetail bezierPoint bezierTangent curve curveDetail curveTightness curvePoint curveTangent beginContour beginShape bezierVertex curveVertex endContour endShape quadraticVertex vertex alpha blue brightness color green hue lerpColor lightness red saturation background clear colorMode fill noFill noStroke stroke erase noErase createStringDict createNumberDict storeItem getItem clearStorage removeItem select selectAll removeElements createDiv createP createSpan createImg createA createSlider createButton createCheckbox createSelect createRadio createColorPicker createInput createFileInput createVideo createAudio VIDEO AUDIO createCapture createElement deviceOrientation accelerationX accelerationY accelerationZ pAccelerationX pAccelerationY pAccelerationZ rotationX rotationY rotationZ pRotationX pRotationY pRotationZ pRotateDirectionX pRotateDirectionY pRotateDirectionZ turnAxis setMoveThreshold setShakeThreshold isKeyPressed keyIsPressed key keyCode keyIsDown movedX movedY mouseX mouseY pmouseX pmouseY winMouseX winMouseY pwinMouseX pwinMouseY mouseButton mouseIsPressed requestPointerLock exitPointerLock touches createImage saveCanvas saveGif saveFrames loadImage image tint noTint imageMode pixels blend copy filter get loadPixels set updatePixels loadJSON loadStrings loadTable loadXML loadBytes httpGet httpPost httpDo createWriter save saveJSON saveJSONObject saveJSONArray saveStrings saveTable writeFile downloadFile abs ceil constrain dist exp floor lerp log mag map max min norm pow round sq sqrt fract createVector noise noiseDetail noiseSeed randomSeed random randomGaussian acos asin atan atan2 cos sin tan degrees radians angleMode textAlign textLeading textSize textStyle textWidth textAscent textDescent loadFont text textFont append arrayCopy concat reverse shorten shuffle sort splice subset float int str boolean byte char unchar hex unhex join match matchAll nf nfc nfp nfs split splitTokens trim day hour minute millis month second year plane box sphere cylinder cone ellipsoid torus orbitControl debugMode noDebugMode ambientLight specularColor directionalLight pointLight lights lightFalloff spotLight noLights loadModel model loadShader createShader shader resetShader normalMaterial texture textureMode textureWrap ambientMaterial emissiveMaterial specularMaterial shininess remove canvas drawingContext*/
// Also socket.io, tensorflow and facemesh's:
/* global describe facemesh tf io*/
// Also in landmarks.js
/* global describe VTX7 VTX33 VTX68 VTX468 TRI7 TRI33 TRI68 TRI468*/
// now any other lint errors will be your own problem



// Mediapipe facemask setup
// A choice for number of keypoints: 7,33,68,468
// === bare minimum 7 points ===
// var VTX = VTX7;
// === important facial feature 33 points ===
// var VTX = VTX33;
// === standard facial landmark 68 points ===
 var VTX = VTX68;
// === full facemesh 468 points ===
//var VTX = VTX468;

// select the right triangulation based on vertices
var TRI = VTX == VTX7 ? TRI7 : (VTX == VTX33 ? TRI33 : (VTX == VTX68 ? TRI68 : TRI468))

var MAX_FACES = 4; //default 10

var facemeshModel = null; // this will be loaded with the facemesh model
                          // WARNING: do NOT call it 'model', because p5 already has something called 'model'

var videoDataLoaded = false; // is webcam capture ready?

var statusText = "Loading facemesh model...";

var myFaces = []; // faces detected in this browser
                  // currently facemesh only supports single face, so this will be either empty or singleton


// Images
var capture; // webcam capture, managed by p5.js
var previousPixels;

// shader variables
let sh_gray,edgessh;
var sh_enabled;

var mode, modemax;

var h, w;


// Load the MediaPipe facemesh model assets.
facemesh.load().then(function(_model){
  console.log("model initialized.")
  statusText = "Model loaded."
  facemeshModel = _model;
})


function setup() {
  //h = window.innerHeight;
  //w = window.innerWidth
  h = windowHeight;
  w = windowWidth;
  // shaders require WEBGL mode to work
  //createCanvas(w,h);
  createCanvas(w,h, WEBGL);
  capture = createCapture(VIDEO);
  
  capture.size(w, h);
  
  // this is to make sure the capture is loaded before asking facemesh to take a look
  // otherwise facemesh will be very unhappy
  capture.elt.onloadeddata = function(){
    console.log("video initialized");
    videoDataLoaded = true;
  }
  
  capture.hide();
  
  // load the shaders
  sh_gray = loadShader('gray.vert', 'gray.frag');
  //edgessh = loadShader('edges.frag','edges.vert');
  //edgessh = loadShader('webcam.frag','webcam.vert');
  
  sh_enabled = false;
  
  //Demo selector
  mode = 0;
  modemax = 7;
}


// draw a face object returned by facemesh
function drawFaces(faces,filled){

  for (var i = 0; i < faces.length; i++){
    const keypoints = faces[i].scaledMesh;

    for (var j = 0; j < keypoints.length; j++) {
      const [x, y, z] = keypoints[j];
      circle(x,y,5);
      push();
      strokeWeight(1);
      text(j,x,y);
      pop()
    }

    for (var j = 0; j < TRI.length; j+=3){
      var a = keypoints[TRI[j  ]];
      var b = keypoints[TRI[j+1]];
      var c = keypoints[TRI[j+2]];
      
      if (filled){
        var d = [(a[0]+b[0]+c[0])/6, (a[1]+b[1]+c[1])/6];
        var color = get(...d);
        fill(color);
        noStroke();
      }
      triangle(
        a[0],a[1],
        b[0],b[1],
        c[0],c[1],
      )
    }
  }
}

// reduces the number of keypoints to the desired set 
// (VTX7, VTX33, VTX68, etc.)
function packFace(face,set){
  var ret = {
    scaledMesh:[],
  }
  for (var i = 0; i < set.length; i++){
    var j = set[i];
    ret.scaledMesh[i] = [
      face.scaledMesh[j][0],
      face.scaledMesh[j][1],
      face.scaledMesh[j][2],
    ]
  }
  return ret;
}

//Version webgl para poder usar shaders, no funciona filter
//https://github.com/aferriss/p5jsShaderExamples
function draw() {
  
  switch (mode){
    case 0:
    case 2: //Input RGB image   
      //capture.loadPixels();  // O falla en refrescar tras cambiar de modo
  
      //image(capture, 0, 0, capture.width, capture.height);
      image(capture, 0, 0);
      
      textSize(20);
      text('RGB', w/2.5, 30);
      break;
      
    case 1: //Convierte a grises
      shader(sh_gray);
      sh_enabled = true;    
      noStroke();
      
      // lets just send the cam to our shader as a uniform
      sh_gray.setUniform('tex0', capture);

      // rect gives us some geometry on the screen
      rect(0,0,width, height);
     
      
      textSize(20);
      text('GRAY', w/2.5, 30);
      break;     
      
    case 3: //Invert color    
      capture.loadPixels();  // O falla en refrescar tras cambiar de modo
  
      image(capture, 0, 0, capture.width, capture.height);
      filter(INVERT);
      
      textSize(20);
      text('INV', w/2.5, 30);
      break;
      
    case 4:  //Image trhesholding
      capture.loadPixels();  // O falla en refrescar tras cambiar de modo
  
      //Thredhold();   // a pelo
      
      image(capture, 0, 0, capture.width, capture.height);
      filter(THRESHOLD);
      
      textSize(20);
      text('UMB', w/2.5, 30);
      
      break;
      
    case 5:
      shader(edgessh);
      
      // passing cam as a texture
      edgessh.setUniform('tex0', capture);
      
      //image(capture, 0, 0, capture.width, capture.height);
      
      textSize(20);
      text('CONT', w/2.5, 30);
      
      break;
      
    case 6:  //Frame differences
      capture.loadPixels();  // O falla en refrescar tras cambiar de modo
  
      FrameDiff();   
      
      textSize(20);
      text('DIF', w/2.5, 30);
      
      break;
    case 7:  //Mediapipe facemesh
      capture.loadPixels();  // O falla en refrescar tras cambiar de modo
  
      FaceMesh();   
      
      textSize(20);
      text('FACE', w/2.5, 30);
      break;
      
  }// switch
}

function mouseClicked() {  
  // If any
  if (sh_enabled){
    resetShader();
    sh_enabled = false;    
  }
  
  
  mode = mode + 1;  
  if (mode > modemax) {
    mode = 0;
  }
}

function copyImage(src, dst) {
    var n = src.length;
    if (!dst || dst.length != n) dst = new src.constructor(n);
    while (n--) dst[n] = src[n];
    return dst;
}


function FrameDiff(){  //source https://github.com/kylemcdonald/cv-examples/blob/master/FrameDifference/sketch.js
  capture.loadPixels();
    var total = 0;
    if (capture.pixels.length > 0) { // don't forget this!
        if (!previousPixels) {
            previousPixels = copyImage(capture.pixels, previousPixels);
        } else {
            var w = capture.width,
                h = capture.height;
            var i = 0;
            var pixels = capture.pixels;
            var thresholdAmount = 40;
            thresholdAmount *= 3; // 3 for r, g, b
            for (var y = 0; y < h; y++) {
                for (var x = 0; x < w; x++) {
                    // calculate the differences
                    var rdiff = Math.abs(pixels[i + 0] - previousPixels[i + 0]);
                    var gdiff = Math.abs(pixels[i + 1] - previousPixels[i + 1]);
                    var bdiff = Math.abs(pixels[i + 2] - previousPixels[i + 2]);
                    // copy the current pixels to previousPixels
                    previousPixels[i + 0] = pixels[i + 0];
                    previousPixels[i + 1] = pixels[i + 1];
                    previousPixels[i + 2] = pixels[i + 2];
                    var diffs = rdiff + gdiff + bdiff;
                    var output = 0;
                    if (diffs > thresholdAmount) {
                        output = 255;
                        total += diffs;
                    }
                    pixels[i++] = output;
                    pixels[i++] = output;
                    pixels[i++] = output;
                    // also try this:
                    // pixels[i++] = rdiff;
                    // pixels[i++] = gdiff;
                    // pixels[i++] = bdiff;
                    i++; // skip alpha
                }
            }
        }
    }
    // need this because sometimes the frames are repeated
    if (true){//total > 0) {
        //select('#motion').elt.innerText = total;
        capture.updatePixels();
        image(capture, 0, 0, 640, 480);
    }
}

function Thredhold(){ // source https://github.com/kylemcdonald/cv-examples/blob/master/Thresholding/sketch.js
    capture.loadPixels();
    if (capture.pixels.length > 0) { // don't forget this!
        var pixels = capture.pixels;
        var thresholdAmount = 128;
        var total = 0;
        var i = 0;
        for (var y = 0; y < h; y++) {
            for (var x = 0; x < w; x++) {
                var redValue = pixels[i];
                var outputValue = 0;
                if (redValue >= thresholdAmount) {
                    outputValue = 255;
                    total++;
                }
                pixels[i++] = outputValue; // set red
                pixels[i++] = outputValue; // set green
                pixels[i++] = outputValue; // set blue
                i++; // skip alpha                
            }
        }

        var n = w * h;
        var ratio = total / n;
    }
    capture.updatePixels();    
    //image(capture, 0, 0, capture.width, capture.height);
  image(capture, 0, 0, 640, 480);
}

function Edge(){
  
}

function Canny(){
  
}

function FaceMesh(){
  strokeJoin(ROUND); //otherwise super gnarly
      if (facemeshModel && videoDataLoaded){ // model and video both loaded, 
        facemeshModel.pipeline.maxFaces = MAX_FACES;
        facemeshModel.estimateFaces(capture.elt).then(function(_faces){
          // we're faceling an async promise
          // best to avoid drawing something here! it might produce weird results due to racing

          myFaces = _faces.map(x=>packFace(x,VTX)); // update the global myFaces object with the detected faces

          // console.log(myFaces);
          if (!myFaces.length){
            // haven't found any faces
            statusText = "Show some faces!"
          }else{
            // display the confidence, to 3 decimal places
            statusText = "Confidence: "+ (Math.round(_faces[0].faceInViewConfidence*1000)/1000);

          }

        })
      }

      background(200);

      // first draw the debug video and annotations
      push();
      //scale(0.5); // downscale the webcam capture before drawing, so it doesn't take up too much screen sapce
      image(capture, 0, 0, capture.width, capture.height);
      noFill();
      stroke(255,0,0);
      drawFaces(myFaces); // draw my face skeleton
      pop();


      // now draw all the other users' faces (& drawings) from the server
      push()

      scale(2);
      strokeWeight(3);
      noFill();
      //drawFaces(myFaces);
      pop();

      push();
      fill(255,0,0);
      text(statusText,2,60);
      pop();
}